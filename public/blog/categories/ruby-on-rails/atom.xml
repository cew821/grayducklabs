<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | Gray Duck Labs]]></title>
  <link href="http://www.grayducklabs.com/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://www.grayducklabs.com/"/>
  <updated>2013-10-12T15:13:37-04:00</updated>
  <id>http://www.grayducklabs.com/</id>
  <author>
    <name><![CDATA[Gray Duck Labs LLC.]]></name>
    <email><![CDATA[contact@grayducklabs.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Intelligently Deduplicating Records in Rails]]></title>
    <link href="http://www.grayducklabs.com/blog/2013/how-to-sort-by-boolean-true-slash-false-value-in-ruby/"/>
    <updated>2013-10-12T10:01:00-04:00</updated>
    <id>http://www.grayducklabs.com/blog/2013/how-to-sort-by-boolean-true-slash-false-value-in-ruby</id>
    <content type="html"><![CDATA[<p>I recently needed to write a deduplicate method in a <a href="http://www.preamp.fm">Rails app I built</a>. In the application, each artist <code>has_one</code> song. However, over the course of several months, several songs had been added to the database with the same <code>artist_id</code> as an existing song.</p>

<p>Based on <a href="http://stackoverflow.com/questions/14124212/remove-duplicate-records-based-on-multiple-columns">this helpful post</a>, my deduplicate method looked like this:</p>

<p>``` ruby Deduplicating Records with the Same Parent ID
class Song
  def self.deduplicate</p>

<pre><code>grouped = all.group_by { |song| song.artist_id }
grouped.values.each do |artist_songs|
  first_one = artist_songs.shift
  artist_songs.each { |dup| dup.destroy }
end
</code></pre>

<p>  end
```</p>

<p>This method groups every song by the song's artist. For groupings with more than one song (i.e. songs that have the same <code>artist_id</code>), it keeps the first song and deletes all the rest.</p>

<p>This works great, but it naively decides which duplicate record to destroy and which to keep.</p>

<p>To make the deduplicating method "smarter" we can use <code>sort</code> and <code>sort_by</code> to influence which duplicate will be kept. For example, if we wanted to keep the duplicate song with the highest play count, we could add this line before the <code>shift</code> method call:</p>

<p><code>ruby
artist_songs.sort! {|a,b| b.play_count &lt;=&gt; a.play_count }
</code></p>

<p>This would ensure that the song "kept" using the <code>shift</code> method is the song with the highest play count.</p>

<p>It's also possible to sort records by boolean values using <code>sort_by</code>. This was useful for my method, because in cases where an artist had two songs, I preferred to keep the song that had been reviewed by a trusted editor vs. one that had not.</p>

<p>The <code>sort</code> method doesn't work with booleans, so we instead use <code>sort_by</code> and replace the booleans with integers to achieve the sort. I used the following line of code before the <code>shift</code> call:</p>

<p><code>ruby
artist_songs.sort_by! { |song| song.reviewed ? 0 : 1 }
</code></p>

<p>Now, I have a concise, reusable method I can use to intelligently de-duplicate my songs.</p>

<p><em>Charles Worthington (<a href="http://www.twitter.com/cew821" title="Twitter">@cew821</a>) is a freelance product designer living in Washington, DC. He would love to <a href="mailto:%63%6f%6e%74%61%63%74@%67%72%61%79%64%75%63%6b%6c%61%62%73.%63%6f%6d" title="Email Us">hear from you</a>!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use the Stately WebFont in a Rails Application]]></title>
    <link href="http://www.grayducklabs.com/blog/2013/how-to-use-the-stately-webfont-in-a-rails-application/"/>
    <updated>2013-02-20T12:32:00-05:00</updated>
    <id>http://www.grayducklabs.com/blog/2013/how-to-use-the-stately-webfont-in-a-rails-application</id>
    <content type="html"><![CDATA[<p>A few weeks ago, <a href="https://twitter.com/bpmarkowitz">Ben Markowitz</a>, a UX designer at <a href="http://www.intridea.com/">Intridea</a>, released an open source web font called <a href="http://intridea.github.com/stately/">Stately</a>. Stately allows designers to make simple, great-looking U.S. map visualizations using only HTML and CSS. For example:</p>

<p><img src="/images/posts/stately_example.jpg" title="[Example of a map created using Stately]" ></p>

<p>Using Stately in a Rails application is pretty straightforward, but it does require a little configuration to get it to work with the Rails asset pipeline.</p>

<!-- more -->


<p><strong>Install Stately in Your Rails Application</strong></p>

<p>First, <a href="https://github.com/intridea/stately">download Stately</a> from Github. The package includes several files, but the ones to focus on for Rails installation are in two directories:</p>

<ul>
<li><code>stately-master/assets/font</code> directory containing four web font files</li>
<li><code>stately-master/assets/sass</code> directory containing four SASS files that handle the basic Stately CSS configuration, and allow you to customize the styles (i.e. assigning different colors to specific states).</li>
</ul>


<p>Copy the .scss files from the <code>stately-master/assets/sass</code> directory into the <code>vendor/assets/stylesheets</code> directory of your Rails application.</p>

<p>Next, create a new directory in the vendor/assets folder to store your fonts, such as <code>vendor/assets/fonts</code>. Copy the four font files from <code>stately-master/assets/font</code> into this new fonts direcetory.</p>

<p><strong>Configure the Rails Asset Pipeline to Recognize Stately</strong></p>

<p>In Rails 3.1+, the asset pipeline helps streamline the inclusion of stylesheets, javascript, images and other assets (like fonts!) for use in your application. Rails manages the inclusion of these assets using manifest files, like the one included in <code>app/assets/stylesheets/application.css</code>. You need to edit this manifest to include Stately:</p>

<p>``` ruby Add Stately to the manifest file (app/assets/stylesheets/application.css)</p>

<h1>...</h1>

<p><em>= require_self
</em>= require_tree .
<em>= require stately    # add stately to the manifest
</em>/</p>

<h1>...</h1>

<p>```</p>

<p>This will tell Rails to load the <code>stately.scss</code> file in your vendor directory, which in turn loads Stately's <code>_setup.scss</code> and <code>_customizations.scss</code> stylesheets, giving you access to the Stately CSS classes described <a href="https://github.com/intridea/stately">in the documentation</a>.</p>

<p>However, the default <code>@font-face</code> settings in Stately's <code>_setup.scss</code> file don't work with the Rails pipeline, because the paths it uses to load the fonts will no longer be correct. In fact, the asset pipeline makes the paths simpler. Edit Stately's <code>_setup.scss</code> stylesheet so that its <code>@font-face</code> <code>src:</code> commands refer directly to the font file names, removing the relative path information:</p>

<p>``` sass Edit Stately's @font-face Command (vendor/assets/stylesheets/_setup.scss)
@font-face {</p>

<pre><code>font-family: 'stately-webfont';
// Remove '../font/' from URL load paths, as shown below:
src: url('stately-webfont.eot');     
src: url('stately-webfont.eot?#iefix') format('embedded-opentype'),
     url('stately-webfont.woff') format('woff'),
     url('stately-webfont.ttf') format('truetype'),
     url('stately-webfont.svg#testfontRegular') format('svg');
font-weight: normal;
font-style: normal;
</code></pre>

<p>}
//...
```</p>

<p>And that's it! Now you should be able to use Stately by using the markup as shown in the <a href="https://github.com/intridea/stately">example documentation</a>. For example, to diplay an image of the nation's best state, you would write the following HTML:</p>

<p>``` html How to use Stately In Your Markup</p>

<ul class="stately"> 
  <li data-state="mn" class="MN">X</li>
</ul>


<p>```</p>

<p>What cool stuff have you built with Stately? Leave a link in the comments!</p>

<p><em>Charles Worthington (<a href="http://www.twitter.com/cew821" title="Twitter">@cew821</a>) is a freelance product designer living in Washington, DC. He would love to <a href="mailto:%63%6f%6e%74%61%63%74@%67%72%61%79%64%75%63%6b%6c%61%62%73.%63%6f%6d" title="Email Us">hear from you</a>!</em></p>
]]></content>
  </entry>
  
</feed>
