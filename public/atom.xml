<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gray Duck Labs]]></title>
  <link href="http://www.grayducklabs.com/atom.xml" rel="self"/>
  <link href="http://www.grayducklabs.com/"/>
  <updated>2013-06-03T18:15:07-04:00</updated>
  <id>http://www.grayducklabs.com/</id>
  <author>
    <name><![CDATA[Gray Duck Labs LLC.]]></name>
    <email><![CDATA[contact@grayducklabs.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Use the Stately WebFont in a Rails Application]]></title>
    <link href="http://www.grayducklabs.com/blog/2013/how-to-use-the-stately-webfont-in-a-rails-application/"/>
    <updated>2013-02-20T12:32:00-05:00</updated>
    <id>http://www.grayducklabs.com/blog/2013/how-to-use-the-stately-webfont-in-a-rails-application</id>
    <content type="html"><![CDATA[<p>A few weeks ago, <a href="https://twitter.com/bpmarkowitz">Ben Markowitz</a>, a UX designer at <a href="http://www.intridea.com/">Intridea</a>, released an open source web font called <a href="http://intridea.github.com/stately/">Stately</a>. Stately allows designers to make simple, great-looking U.S. map visualizations using only HTML and CSS. For example:</p>

<p><img src="http://www.grayducklabs.com/images/posts/stately_example.jpg" title="[Example of a map created using Stately]" ></p>

<p>Using Stately in a Rails application is pretty straightforward, but it does require a little configuration to get it to work with the Rails asset pipeline.</p>

<!-- more -->


<p><strong>Install Stately in Your Rails Application</strong></p>

<p>First, <a href="https://github.com/intridea/stately">download Stately</a> from Github. The package includes several files, but the ones to focus on for Rails installation are in two directories:</p>

<ul>
<li><code>stately-master/assets/font</code> directory containing four web font files</li>
<li><code>stately-master/assets/sass</code> directory containing four SASS files that handle the basic Stately CSS configuration, and allow you to customize the styles (i.e. assigning different colors to specific states).</li>
</ul>


<p>Copy the .scss files from the <code>stately-master/assets/sass</code> directory into the <code>vendor/assets/stylesheets</code> directory of your Rails application.</p>

<p>Next, create a new directory in the vendor/assets folder to store your fonts, such as <code>vendor/assets/fonts</code>. Copy the four font files from <code>stately-master/assets/font</code> into this new fonts direcetory.</p>

<p><strong>Configure the Rails Asset Pipeline to Recognize Stately</strong></p>

<p>In Rails 3.1+, the asset pipeline helps streamline the inclusion of stylesheets, javascript, images and other assets (like fonts!) for use in your application. Rails manages the inclusion of these assets using manifest files, like the one included in <code>app/assets/stylesheets/application.css</code>. You need to edit this manifest to include Stately:</p>

<figure class='code'><figcaption><span>Add Stately to the manifest file (app/assets/stylesheets/application.css)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="o">*=</span> <span class="n">require_self</span>
</span><span class='line'><span class="o">*=</span> <span class="n">require_tree</span> <span class="o">.</span>
</span><span class='line'><span class="o">*=</span> <span class="nb">require</span> <span class="n">stately</span>    <span class="c1"># add stately to the manifest</span>
</span><span class='line'><span class="o">*/</span>
</span><span class='line'><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will tell Rails to load the <code>stately.scss</code> file in your vendor directory, which in turn loads Stately&#8217;s <code>_setup.scss</code> and <code>_customizations.scss</code> stylesheets, giving you access to the Stately CSS classes described <a href="https://github.com/intridea/stately">in the documentation</a>.</p>

<p>However, the default <code>@font-face</code> settings in Stately&#8217;s <code>_setup.scss</code> file don&#8217;t work with the Rails pipeline, because the paths it uses to load the fonts will no longer be correct. In fact, the asset pipeline makes the paths simpler. Edit Stately&#8217;s <code>_setup.scss</code> stylesheet so that its <code>@font-face</code> <code>src:</code> commands refer directly to the font file names, removing the relative path information:</p>

<figure class='code'><figcaption><span>Edit Stately&#8217;s @font-face Command (vendor/assets/stylesheets/_setup.scss)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@font-face</span> <span class="err">{</span>
</span><span class='line'>    <span class="na">font-family</span><span class="o">:</span> <span class="s1">&#39;</span><span class="s2">stately-webfont&#39;</span><span class="err">;</span>
</span><span class='line'>    <span class="c1">// Remove &#39;../font/&#39; from URL load paths, as shown below:</span>
</span><span class='line'>    <span class="na">src</span><span class="o">:</span> <span class="sx">url(&#39;stately-webfont.eot&#39;)</span><span class="err">;</span>
</span><span class='line'>    <span class="na">src</span><span class="o">:</span> <span class="sx">url(&#39;stately-webfont.eot?#iefix&#39;)</span> <span class="nf">format</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">embedded-opentype&#39;</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>         <span class="nt">url</span><span class="o">(</span><span class="s1">&#39;</span><span class="s2">stately-webfont.woff&#39;</span><span class="o">)</span> <span class="nt">format</span><span class="o">(</span><span class="s1">&#39;</span><span class="s2">woff&#39;</span><span class="o">),</span>
</span><span class='line'>         <span class="nt">url</span><span class="o">(</span><span class="s1">&#39;</span><span class="s2">stately-webfont.ttf&#39;</span><span class="o">)</span> <span class="nt">format</span><span class="o">(</span><span class="s1">&#39;</span><span class="s2">truetype&#39;</span><span class="o">),</span>
</span><span class='line'>         <span class="nt">url</span><span class="o">(</span><span class="s1">&#39;</span><span class="s2">stately-webfont.svg#testfontRegular&#39;</span><span class="o">)</span> <span class="nt">format</span><span class="o">(</span><span class="s1">&#39;</span><span class="s2">svg&#39;</span><span class="o">);</span>
</span><span class='line'>    <span class="na">font-weight</span><span class="o">:</span> <span class="no">normal</span><span class="err">;</span>
</span><span class='line'>    <span class="na">font-style</span><span class="o">:</span> <span class="no">normal</span><span class="err">;</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'><span class="c1">//...</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it! Now you should be able to use Stately by using the markup as shown in the <a href="https://github.com/intridea/stately">example documentation</a>. For example, to diplay an image of the nation&#8217;s best state, you would write the following HTML:</p>

<figure class='code'><figcaption><span>How to use Stately In Your Markup</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;stately&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">data-state=</span><span class="s">&quot;mn&quot;</span> <span class="na">class=</span><span class="s">&quot;MN&quot;</span><span class="nt">&gt;</span>X<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>What cool stuff have you built with Stately? Leave a link in the comments!</p>

<p><em>Charles Worthington (<a href="http://www.twitter.com/cew821" title="Twitter">@cew821</a>) is a freelance product designer living in Washington, DC. He would love to <a href="mailto:%63%6f%6e%74%61%63%74@%67%72%61%79%64%75%63%6b%6c%61%62%73.%63%6f%6d" title="Email Us">hear from you</a>!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Free Design Idea: Fixing Conference Call Frustration with Software]]></title>
    <link href="http://www.grayducklabs.com/blog/2012/free-design-idea-fix-conference-calls-with-software/"/>
    <updated>2012-12-20T23:13:00-05:00</updated>
    <id>http://www.grayducklabs.com/blog/2012/free-design-idea-fix-conference-calls-with-software</id>
    <content type="html"><![CDATA[<p>Conference calls are an unfortunate fact of life. No one loves their conference call system, but even in the age of Skype, Join.me, Google+ Hangouts, and countless other ways to collaborate, conference lines remain the standard way for remote teams to communicate. And for good reason: access is universal, and you can participate while driving 65 MPH down the interstate.</p>

<p>One of the most fustrating parts of conference call systems is getting dialed in. If you are anything like me, your dial in process probably works like this:</p>

<p><img src="http://www.grayducklabs.com/images/posts/conf_call_flow.png" title="[Conference Call Flow]" ></p>

<p><strong>Software to the Rescue</strong></p>

<p>The dialer user experience should be adapted to better handle the conference call scenario. Here is one example of how this could work:</p>

<p><img src="http://www.grayducklabs.com/images/posts/new_conf_flow.png" title="[Improved Conference Call Flow Design Suggestion]" ></p>

<p>In many cases, it should be possible for the phone to detect when a user is trying to enter a conference call. Indicators would include initiating a phone call from inside a meeting reminder containing the words &#8220;conference call&#8221;, &#8220;bridge&#8221;, &#8220;passcode&#8221;, &#8220;meeting ID&#8221;, and the like. Meetings with multiple attendees and a phone number in the location field would be another good sign that the user wants to join a conference call.</p>

<p>In these cases, the dialer should open with the keypad open and the OS&#8217;s best guess at the conference passcode listed above the keypad.</p>

<p>A feature like this would prevent a lot of frustration, and save me literally SECONDS each week. If any mobile OS product people are reading this, please discuss this implementing this idea on your next product design call!</p>

<p><em>Charles Worthington (<a href="http://www.twitter.com/cew821" title="Twitter">@cew821</a>) is a freelance product designer living in Washington, DC. He would love to <a href="mailto:%63%6f%6e%74%61%63%74@%67%72%61%79%64%75%63%6b%6c%61%62%73.%63%6f%6d" title="Email Us">hear from you</a>!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebuilding Gray Duck Labs with Octopress]]></title>
    <link href="http://www.grayducklabs.com/blog/2012/introducing-the-new-gray-duck-labs/"/>
    <updated>2012-11-04T00:25:00-04:00</updated>
    <id>http://www.grayducklabs.com/blog/2012/introducing-the-new-gray-duck-labs</id>
    <content type="html"><![CDATA[<p>When I chose to leave my awesome <a href="http://www.altvil.com">strategy consulting job</a> to pursue a freelancing career in product design and development, creating a brand to represent myself was one of the first projects I worked on. In a way, I was my own first &#8220;client.&#8221;</p>

<p>Gray Duck Labs was the outcome of this effort. I created a portfolio of branded documents, including a letterhead, a slide and wireframing template, business cards, and of course, a web site.</p>

<p><img src="http://www.grayducklabs.com/images/posts/grayducklabs_old_screenshot.png" title="Screenshot of the old Gray Duck Labs site" ></p>

<p>Since this effort coincided with a personal push to refresh my web development skills, I took the opportunity to design and code my own site, including writing my own blogging engine in Ruby on Rails. Initially I was happy with the result (I kept <a href="http://grayducklabs.herokuapp.com">a copy live on Heroku</a> if you&#8217;re interested). As time passed, however, I became frustrated with the limitations of the blog engine I had created. For example, my engine lacked:</p>

<ul>
<li>Social sharing buttons</li>
<li>An article index</li>
<li>Article tagging</li>
<li>Named page routes</li>
<li>Comments</li>
</ul>


<p>None of these features are revolutionary. In fact, these are problems that have been solved <a href="http://www.wordpress.org">many</a> <a href="http://www.blogger.com">times</a> <a href="http://www.squarespace.com">over</a>. As I became busy with actual client work, I found less appeal in the idea of writing these features from scratch &#8220;for fun.&#8221;</p>

<p>Enter <a href="http://www.octopress.org">Octopress</a>. Octopress is a Ruby framework that extends <a href="https://github.com/mojombo/jekyll">Jekyll</a> to allow you to generate a static site that includes many features that would normally require a dynamic web application.</p>

<!-- more -->


<p>I chose to use Octopress because it includes many key features out of the box, including social integration and a responsive layout. Being built with Ruby, it was also a good match for my skill set.</p>

<p>I wound up customizing the implementation much more than I was expecting going in. This was because Octopress&#8217;s default theme (and most of the <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">third party themes</a>) are very blog-centered, and apparently not intended to host static marketing content. If you&#8217;re interested in the gory details of how I created the site you&#8217;re looking at, you can <a href="https://github.com/cew821/grayducklabs">check out the source code on GitHub</a>.</p>

<p>Overall, I&#8217;m happy with the transition. I like the design changes I made to the marketing content, and despite the heavy customization required it was helpful to use Octopress&#8217; themes as a starting point for my own responsive design.</p>

<p>But the main benefit to this change is that I can now focus on the content. Writing a new post is as easy as dropping a text file into the <code>/posts</code> directory and running <code>$ rake generate</code> and <code>$ git push heroku</code>.</p>

<h4>Why this might be a bad idea</h4>

<p>In the immediate term, the new site is definitely an improvement, but I do have a few reservations. Mainly, these boil down to two issues:</p>

<ul>
<li><strong>I need my development machine to make a new post.</strong> Before, I could just log in to my Rails app from any computer to make a change. Now, pushing an update from a location other than my development machine would require a non-trivial configuration process. I also won&#8217;t be able to update the blog from a mobile device.</li>
<li><strong>It will be nearly impossible for non-coders to contribute.</strong> Though Gray Duck Labs is just me for now, it&#8217;s not inconceivable that at some point there will be other folks I want to contribute to this blog. In a traditional web app (including in my basic Rails implementation), this would be no problem. With Octopress, other contributors would need the ability to make pull requests to my GitHub repo. Fine for developers, pretty much unusable for everyone else.</li>
</ul>


<p>I suspect if it ever gets to that point I&#8217;ll wind up migrating to a more traditional database-driven blog engine like Wordpress. But until then, I&#8217;m happy to be &#8216;blogging like a developer.&#8217;</p>

<p>If you&#8217;ve been using Octopress or Jekyll for your company blog and encountered these issues, or if you&#8217;d like to learn more about my experience, <a href="mailto:%63%6f%6e%74%61%63%74@%67%72%61%79%64%75%63%6b%6c%61%62%73.%63%6f%6d">drop me a line</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why is the World Series Unavailable for Streaming?]]></title>
    <link href="http://www.grayducklabs.com/blog/2012/why-is-the-world-series-unavailable-for-streaming-s/"/>
    <updated>2012-10-25T09:20:00-04:00</updated>
    <id>http://www.grayducklabs.com/blog/2012/why-is-the-world-series-unavailable-for-streaming-s</id>
    <content type="html"><![CDATA[<p>Dear Fox Sports &amp; MLB,</p>

<p>I tried to watch the World Series tonight, but it seems you haven&#8217;t yet figured out a way to monetize a live stream of a World Series game and instead have chosen to black it out online. This, despite the fact that you broadcast this same game for free on TV.</p>

<p>It&#8217;s 2012. If this is the best you can do, you&#8217;re going to have a really bad time over the next five years. If you need any advice, feel free to get in touch.</p>

<p>Sincerely, <br/>
the Internet</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Usability vs. Advertising]]></title>
    <link href="http://www.grayducklabs.com/blog/2012/usability-vs-advertising/"/>
    <updated>2012-08-11T09:04:00-04:00</updated>
    <id>http://www.grayducklabs.com/blog/2012/usability-vs-advertising</id>
    <content type="html"><![CDATA[<p>Is good design compatible with advertising? A quick jaunt through some of the Internet&#8217;s most popular web and mobile properties would suggest the answer is mostly no.</p>

<p>At best, ads are relevant, tasteful and relegated to an easy-to-ignore location such as the right-hand gutter or a banner above the content. Too often, though, the web ads result in pages that look like this:</p>

<p><img src="http://www.grayducklabs.com/images/posts/ad_shot.png" title="[Bad Design[Screenshot of an About.com article littered with advertising, making the content difficult to parse.]]" ></p>

<p>As product designers, we obsess over crafting great UX flows and pixel-perfect designs while ignoring incoherent blinking mess that will soon populate those innocuous-looking gray placeholder boxes on our mockups. There are no &#8220;user stories&#8221; that read: &#8220;As a Celtics fan, I want to read a summary of tonight&#8217;s game, so I should be able to see a banner ad for auto insurance.&#8221;</p>

<p>Instead, we trust that our users are complicit in our bargain: a free service in exchange for the subpar user experience. However, three trends threaten to shake up this bargain in ways that should concern any company that depends on trading usability for revenue.</p>

<p><strong>1. There is Nowhere to Hide a Belly Fat Ad on a 4&#8221; Screen</strong></p>

<p>  On a smartphone, every pixel is a valuable asset. On the best mobile applications, the density of useful information is extremely high. Put another way, the &#8220;usability cost&#8221; of each ad is much greater on a mobile device than in a desktop browser.</p>

<p><strong>2. Users Expect More</strong></p>

<p>As the Internet has evolved from a series of mostly static content pages to a collection of interconnected dynamic apps, users have been trained to expect better, more thoughtful design and fewer mindless advertisements. The whole community has supported this trend by heaping praise and/or VC funding into consumer web/mobile companies without a sustainable business model.</p>

<p><strong>3. Facebook&#8217;s IPO Will Change the Users > Revenue Equation</strong></p>

<p>Conventional wisdom dictates a consumer web startup should &#8220;focus on users first, monetization second.&#8221; Once a service has millions of users with great engagement, the logic goes, there will be many opportunities to monetize these users. To bridge the gap between users and business model, venture capital steps in to pay the salaries of the awesome designers and programmers that make these cool apps possible.</p>

<p>This equation has been great for users and for design talent, because it allows visionary product people to hire great teams and implement awesome apps without worrying how to pay for it all (see Path, Instagram).</p>

<p>For investors, this equation has worked out OK, insofar as great design teams and/or engaged users make attractive acquisition targets for the gatekeepers of consumer-technology&#8217;s four proven cash machines: Google (search advertising), Apple (devices), Microsoft (desktop software), and Zynga/Facebook (naive stock market speculators).</p>

<p>However, if Facebook&#8217;s attempts to monetize its users continues to fall short (which seems inevitable due to the incredibly lofty expectations set by its opening price), it&#8217;s probable that this gravy train will dry up.</p>

<hr />

<p><strong>In short</strong>, users don&#8217;t want ads and are being trained to expect great user experiences for free, especially on mobile devices. This unsustainable trend has so far been supported by acquisition and speculation, but Facebook&#8217;s failure to meet expectations will reduce investor appetite for funding products with no business model.</p>

<p>In my next post, I&#8217;ll explore several potential ways out of this trap.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disruptive Design]]></title>
    <link href="http://www.grayducklabs.com/blog/2012/disruptive-design/"/>
    <updated>2012-04-13T08:53:00-04:00</updated>
    <id>http://www.grayducklabs.com/blog/2012/disruptive-design</id>
    <content type="html"><![CDATA[<p>We often think of market trends as being driven by disruptive technologies.</p>

<p>Cloud computing is fueled by pervasive broadband networks and commodity server hardware. Smartphones are driven by low-cost microprocessors and high-speed wireless networks. Big data is created by massive online datasets and new distributed computing frameworks.</p>

<p>But while new technology is required, it is usually great design that disrupts markets.</p>

<p>It&#8217;s easy to think of examples. The iPhone certainly wasn&#8217;t the first smartphone, but its design reshaped the wireless industry. Server-side applications were nothing new, but it took Salesforce.com show that this method could be used to deliver a superior user experience. Dropbox made online backups work for users, rather than the other way around. Ruby/Rails, Python/Django, Backbone.js/Node.js, and MongoDB are doing the same for developers; when&#8217;s the last time you heard of a non-legacy product team developing in .NET or Oracle?</p>

<p>It is fun to think of other markets that have yet to be impacted by disruptive design, despite the required technology being in place. TV is a great example. Many TVs now ship with microprocessors and Internet connectivity, but in most ways the experience of watching cable is the same now as it was 20 years ago.</p>

<p>Similarly, utilities have spent much of the past five years installing smart meters on the sides of houses across the country. Yet for most Americans the process of consuming electricity is exactly the same as it was before this technology was installed.</p>

<p>At Gray Duck Labs, we love working on projects with disruptive design potential. Have an idea? Get in touch!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lift Off]]></title>
    <link href="http://www.grayducklabs.com/blog/2012/lift-off/"/>
    <updated>2012-03-29T09:02:00-04:00</updated>
    <id>http://www.grayducklabs.com/blog/2012/lift-off</id>
    <content type="html"><![CDATA[<p>Today I&#8217;m excited to announce the official launch of Gray Duck Labs.</p>

<p>For the past six years, I&#8217;ve worked as a strategy consultant in the technology and telecom industry. I have been lucky to work with <a href="http://www.altvil.com">great colleagues</a> and amazing clients across the industry, but what I enjoyed most about my time as a consultant was helping organizations adapt their products to take advantage of changing market conditions.</p>

<p>I started Gray Duck Labs so I could focus exclusively on developing these products, from concept to pitch, pitch to product, and product to profit.</p>

<p>Gray Duck Labs will work with talented designers, engineers and product managers to push their ideas to the next level, whatever that may be. We plan to work with teams of all shapes and sizes, from early-stage startups to Fortune 500 product groups. Depending on the situation, we will provide advisory services, invest in ideas, or just lend a hand when cool folks need a PowerPoint ninja to get them through next week&#8217;s meeting.</p>

<p>We already have some great projects in the works, and are always interested in doing more. Drop us a line today to find out how we can work together!</p>
]]></content>
  </entry>
  
</feed>
